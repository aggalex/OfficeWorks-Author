#!/usr/bin/env python2.7
# coding=UTF-8

import sys
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Granite', '1.0')
from gi.repository import Gtk, Gdk, GdkPixbuf, Gio, Pango, Granite
from os.path import expanduser
import os

class main_window(Gtk.Window):
  
  def __init__(self):
    Gtk.Window.__init__(self, title="")
    cssProvider = Gtk.CssProvider()
    cssProvider.load_from_path('style.css')
    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)
  
    home = expanduser("~")
    self.create_window()

#  def show_about(sender = None):
#  	about = Granite.WidgetsAboutDialog.new()
#  	about.set_program_name("OfficeWorks Author")
#  	about.set_comments("""A text editor, part of the OfficeWorks Suite.""")
#  #	icon = Gio.ThemedIcon(name="")
#  #	about.set_logo(Gtk.Image.new_from_gicon(icon, 64))
#  #	about.set_website("http://www.officeworks.org/products/author")
#   	about.set_website_label("OfficeWorks website")
#   	about.set_version("0.1")
#  	about.run()
#  	about.destroy()
  
  def create_window(self):
    self.create_headerbar()
    self.split_window()
  
#  def page_changed(sender, info):
#  	sender.set_page(info)
  
  def create_headerbar(self):
    hb = Gtk.HeaderBar()
    hb.set_name("")
    hb.set_show_close_button(True)
    hb.props.title = ""
    
    mainbt = Gtk.Button()
    mainbt.set_name("mainbt")
    mainbt.set_property("width-request", 50)
    mainbt.set_property("height-request", 30)
    logopixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Icon.png", width=40, height=20, preserve_aspect_ratio=True)
    logo = Gtk.Image.new_from_pixbuf(logopixbuf)
    mainbt.add(logo)
    hb.pack_start(mainbt)
    
    vseparator = Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)
    hb.pack_start(vseparator)
    
    new = Gtk.ToolButton()
    new.set_icon_name("document-new")
    hb.pack_start(new)
    
    undo = Gtk.ToolButton()
    undo.set_icon_name("undo")
    hb.pack_start(undo)
    
    redo = Gtk.ToolButton()
    redo.set_icon_name("redo")
    hb.pack_start(redo)
    
    printpg = Gtk.ToolButton()
    printpg.set_icon_name("document-print")
    hb.pack_start(printpg)
    
    printpg = Gtk.ToolButton()
    printpg.set_icon_name("document-print-preview")
    hb.pack_start(printpg)
    
    hbbgpixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("headerbarbg.png", width=250, height=250, preserve_aspect_ratio=True)
    headerbarbg = Gtk.Image.new_from_pixbuf(hbbgpixbuf)
    hb.pack_end(headerbarbg)
    
    self.set_titlebar(hb)
  
  def split_window(self):
    box = Gtk.VBox()
    paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL)
    self.create_pageview(paned)
    self.create_toolbox(paned)
    paned.props.position = 260
    box.pack_start(paned, True, True, 0)
    self.add(box)

  def set_visible(self, widget, ToolStack, Toolbox):
    ToolStack.set_visible_child_name(Toolbox)
  
  def create_toolbox(self, paned):
    ToolView = Gtk.HBox()
    paned.add1(ToolView)
  
    toolstack = Gtk.Stack()
    toolstack.set_transition_type(Gtk.StackTransitionType.UNDER_RIGHT)
    toolstack.set_transition_duration(500)
    self.create_home_toolbox(toolstack)
    self.create_insert_toolbox(toolstack)

    self.set_visible(None, toolstack, "home_toolbox")
    
    ToolSelectViewWrapper = Gtk.VBox()
    ToolView.pack_start(ToolSelectViewWrapper, False, False, 10)
    
    ToolSelectView = Gtk.VBox()
    ToolSelectViewWrapper.pack_start(ToolSelectView, True, False, 0)
    
    HomeButton = Gtk.RadioButton.new_from_widget(None)
    HomeButtonIcon = Gtk.Image.new_from_icon_name("go-home-symbolic", Gtk.IconSize.LARGE_TOOLBAR)
    HomeButton.props.draw_indicator = False
    HomeButton.add(HomeButtonIcon)
    HomeButton.set_property("width-request", 40)
    HomeButton.set_property("height-request", 40)
    HomeButton.connect("toggled", self.set_visible, toolstack, "home_toolbox")
    ToolSelectView.pack_start(HomeButton, False, False, 0)
  
    InsertButton = Gtk.RadioButton.new_from_widget(HomeButton)
    InsertButtonIcon = Gtk.Image.new_from_icon_name("list-add-symbolic", Gtk.IconSize.LARGE_TOOLBAR)
    InsertButton.props.draw_indicator = False
    InsertButton.add(InsertButtonIcon)
    InsertButton.set_property("width-request", 40)
    InsertButton.set_property("height-request", 40)
    InsertButton.connect("toggled", self.set_visible, toolstack, "insert_toolbox")
    ToolSelectView.pack_start(InsertButton, False, False, 0)
  
    PageButton = Gtk.RadioButton.new_from_widget(HomeButton)
    PageButtonIcon = Gtk.Image.new_from_icon_name("view-paged-symbolic", Gtk.IconSize.LARGE_TOOLBAR)
    PageButton.props.draw_indicator = False
    PageButton.add(PageButtonIcon)
    PageButton.set_property("width-request", 40)
    PageButton.set_property("height-request", 40)
    ToolSelectView.pack_start(PageButton, False, False, 0)
  
    ReviewButton = Gtk.RadioButton.new_from_widget(HomeButton)
    ReviewButtonIcon = Gtk.Image.new_from_icon_name("tools-check-spelling-symbolic", Gtk.IconSize.LARGE_TOOLBAR)
    ReviewButton.props.draw_indicator = False
    ReviewButton.add(ReviewButtonIcon)
    ReviewButton.set_property("width-request", 40)
    ReviewButton.set_property("height-request", 40)
    ToolSelectView.pack_start(ReviewButton, False, False, 0)
  
    ViewButton = Gtk.RadioButton.new_from_widget(HomeButton)
    ViewButtonIcon = Gtk.Image.new_from_icon_name("view-filter-symbolic", Gtk.IconSize.LARGE_TOOLBAR)
    ViewButton.props.draw_indicator = False
    ViewButton.add(ViewButtonIcon)
    ViewButton.set_property("width-request", 40)
    ViewButton.set_property("height-request", 40)
    ToolSelectView.pack_start(ViewButton, False, False, 0)
  
    ToolSelectView.get_style_context().add_class("linked")
  
    toolseparator = Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)
    ToolView.pack_start(toolseparator, False, False, 0)
  
    ToolView.pack_start(toolstack, True, True, 0)
    
    paned.add1(ToolSelectView)
  
  def create_home_toolbox(self, ToolStack):
    toolbox = Gtk.VBox()
    
    SectionTitle = Gtk.Label("Home")
    SectionTitle.set_name("SectionTitle")
    SectionTitleBox = Gtk.VBox()
    SectionTitleBox.pack_start(SectionTitle, False, True, 0)
    
    formatbts = Gtk.VBox()
    fpainter = Gtk.Button()
    fpainter.set_property("width-request", 50)
    fpainter.set_property("height-request", 30)
    fpainter.set_property("label", "format painter")
    fclear = Gtk.Button()
    fclear.set_property("width-request", 50)
    fclear.set_property("height-request", 30)
    fclear.set_property("label", "Clear formatting")
    formatbts.pack_start(fpainter, False, False, 0)
    formatbts.pack_start(fclear, False, False, 0)
    toolbox.pack_start(formatbts, False, False, 4)
    formatbts.get_style_context().add_class("linked")
    
    toolseparator1 = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
    toolbox.pack_start(toolseparator1, False, False, 20)
    
    fontbox = Gtk.VBox()
    fontentry = Gtk.Entry()
    fontentry.set_text("Open Sans")
    fontbox.pack_start(fontentry, False, False, 0)
    adjustment = Gtk.Adjustment(14, 0, 100, 1, 10, 0)
    sizeentry = Gtk.SpinButton()
    sizeentry.set_adjustment(adjustment)
    sizeentry.connect("value-changed", self.change_size)
    fontbox.pack_start(sizeentry, False, False, 0)
    fontbox.get_style_context().add_class("linked")
    toolbox.pack_start(fontbox, False, True, 4)
    
    stylebox = Gtk.HBox()
    stylebold = Gtk.ToggleButton()
    stylebold.set_active(False)
    imagebold = Gtk.Image.new_from_icon_name("format-text-bold-symbolic", Gtk.IconSize.BUTTON)
    stylebold.add(imagebold)
    stylebold.connect("toggled", self.edit_tags, self.tag_bold, self.tag_thin)
    stylebox.pack_start(stylebold, True, True, 0)
    styleitalics = Gtk.ToggleButton()
    styleitalics.set_active(False)
    imageitalics = Gtk.Image.new_from_icon_name("format-text-italic-symbolic", Gtk.IconSize.BUTTON)
    styleitalics.add(imageitalics)
    styleitalics.connect("toggled", self.edit_tags, self.tag_italics, self.tag_straight)
    stylebox.pack_start(styleitalics, True, True, 0)
    styleunderline = Gtk.ToggleButton()
    styleunderline.set_active(False)
    imageunderline = Gtk.Image.new_from_icon_name("format-text-underline-symbolic", Gtk.IconSize.BUTTON)
    styleunderline.add(imageunderline)
    styleunderline.connect("toggled", self.edit_tags, self.tag_underline, self.tag_no_underline)
    stylebox.pack_start(styleunderline, True, True, 0)
    stylestrikethrough = Gtk.ToggleButton()
    stylestrikethrough.set_active(False)
    imagestrikethrough = Gtk.Image.new_from_icon_name("format-text-strikethrough-symbolic", Gtk.IconSize.BUTTON)
    stylestrikethrough.add(imagestrikethrough)
    stylestrikethrough.connect("toggled", self.edit_tags, self.tag_strikethrough, self.tag_no_strikethrough)
    stylebox.pack_start(stylestrikethrough, True, True, 0)
    toolbox.pack_start(stylebox, False, True, 4);
    stylebox.get_style_context().add_class("linked")
    
    txtcolorbox = Gtk.HBox()
    txtcolorlabel = Gtk.Label("Text Color")
    txtcolorentry = Gtk.ColorButton(color=Gdk.Color(0,0,0))
    txtcolorbox.pack_start(txtcolorlabel, False, False, 2)
    txtcolorbox.pack_end(txtcolorentry, False, False, 2)
    toolbox.pack_start(txtcolorbox, False, True, 4)
    
    hlcolorbox = Gtk.HBox()
    hlcolorlabel = Gtk.Label("Highlight Color")
    hlcolorentry = Gtk.ColorButton(color=Gdk.Color(65535,65535,65535))
    hlcolorbox.pack_start(hlcolorlabel, False, False, 2)
    hlcolorbox.pack_end(hlcolorentry, False, False, 2)
    toolbox.pack_start(hlcolorbox, False, True, 4)
    
    toolseparator2 = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
    toolbox.pack_start(toolseparator2, False, False, 20)
    
    alignbox = Gtk.HBox()
    alignleft = Gtk.RadioButton.new_from_widget(None)
    imageleft = Gtk.Image.new_from_icon_name("format-justify-left-symbolic", Gtk.IconSize.BUTTON)
    alignleft.props.draw_indicator = False
    alignleft.add(imageleft)
    #alignleft.connect("toggled", self.on_button_toggled, "1")
    alignbox.pack_start(alignleft, True, True, 0)
    aligncenter = Gtk.RadioButton.new_from_widget(alignleft)
    imagecenter = Gtk.Image.new_from_icon_name("format-justify-center-symbolic", Gtk.IconSize.BUTTON)
    aligncenter.props.draw_indicator = False
    aligncenter.add(imagecenter)
    #aligncenter.connect("toggled", self.on_button_toggled, "1")
    alignbox.pack_start(aligncenter, True, True, 0)
    alignright = Gtk.RadioButton.new_from_widget(alignleft)
    imagenone = Gtk.Image.new_from_icon_name("format-justify-left-symbolic", Gtk.IconSize.BUTTON)
    alignright.props.draw_indicator = False
    alignright.add(imagenone)
    #alignright.connect("toggled", self.on_button_toggled, "1")
    alignbox.pack_start(alignright, True, True, 0)
    alignfill = Gtk.RadioButton.new_from_widget(alignleft)
    imagefill = Gtk.Image.new_from_icon_name("format-justify-fill-symbolic", Gtk.IconSize.BUTTON)
    alignfill.props.draw_indicator = False
    alignfill.add(imagefill)
    #alignfill.connect("toggled", self.on_button_toggled, "1")
    alignbox.pack_start(alignfill, True, True, 0)
    toolbox.pack_start(alignbox, False, True, 4)
    alignbox.get_style_context().add_class("linked")
    
    listbox = Gtk.HBox()
    listbulleted = Gtk.RadioButton.new_from_widget(None)
    imagebulleted = Gtk.Image.new_from_icon_name("view-more-symbolic", Gtk.IconSize.BUTTON)
    listbulleted.props.draw_indicator = False
    listbulleted.add(imagebulleted)
    #listbulleted.connect("toggled", self.on_button_toggled, "1")
    listbox.pack_start(listbulleted, True, True, 0)
    listnumbered = Gtk.RadioButton.new_from_widget(listbulleted)
    listnumbered.set_label("1. 2. 3.")
    listnumbered.props.draw_indicator = False
    #listnumbered.connect("toggled", self.on_button_toggled, "1")
    listbox.pack_start(listnumbered, True, True, 0)
    listnone = Gtk.RadioButton.new_from_widget(listbulleted)
    listnone.set_active(True)
    imagenone = Gtk.Image.new_from_icon_name("action-unavailable-symbolic", Gtk.IconSize.BUTTON)
    listnone.props.draw_indicator = False
    listnone.add(imagenone)
    #listnone.connect("toggled", self.on_button_toggled, "1")
    listbox.pack_start(listnone, True, True, 0)
    listbox.get_style_context().add_class("linked")
    toolbox.pack_start(listbox, False, True, 4)
    
    indentbox = Gtk.HBox()
    indentless = Gtk.Button()
    imageindentless = Gtk.Image.new_from_icon_name("format-indent-less-symbolic", Gtk.IconSize.BUTTON)
    indentless.add(imageindentless)
    indentbox.pack_start(indentless, True, True, 0)
    indentmore = Gtk.Button()
    imageindentmore = Gtk.Image.new_from_icon_name("format-indent-more-symbolic", Gtk.IconSize.BUTTON)
    indentmore.add(imageindentmore)
    indentbox.pack_start(indentmore, True, True, 0)
    toolbox.pack_start(indentbox, False, True, 4)
    indentbox.get_style_context().add_class("linked")
    
    shadingcolorbox = Gtk.HBox()
    shadingcolorlabel = Gtk.Label("Shading Color")
    shadingcolorentry = Gtk.ColorButton(color=Gdk.Color(65535,65535,65535))
    shadingcolorbox.pack_start(shadingcolorlabel, False, False, 2)
    shadingcolorbox.pack_end(shadingcolorentry, False, False, 2)
    toolbox.pack_start(shadingcolorbox, False, True, 4)
    
    toolseparator2 = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
    toolbox.pack_start(toolseparator2, False, False, 20)
    
    Stylebox = Gtk.VBox()
    style1 = Gtk.Button()
    style1.set_property("height-request", 100)
    Stylebox.pack_start(style1, False, True, 0)
    Labelbox1 = Gtk.VBox()
    EgLabel1 = Gtk.Label()
    EgLabel1.set_markup("<b><big><big><big>AaBbCcDdEe...</big></big></big></b>")
    Labelbox1.pack_start(EgLabel1, True, True, 10)
    NameLabel1 = Gtk.Label("Title Style")
    Labelbox1.pack_start(NameLabel1, True, True, 10)
    style1.add(Labelbox1)
    style2 = Gtk.Button()
    style2.set_property("height-request", 100)
    Stylebox.pack_start(style2, False, True, 0)
    Labelbox2 = Gtk.VBox()
    EgLabel2 = Gtk.Label()
    EgLabel2.set_markup("<i><big><big>AaBbCcDdEe...</big></big></i>")
    Labelbox2.pack_start(EgLabel2, True, True, 10)
    NameLabel2 = Gtk.Label("Subtitle Style")
    Labelbox2.pack_start(NameLabel2, True, True, 10)
    style2.add(Labelbox2)
    style3 = Gtk.Button()
    style3.set_property("height-request", 100)
    Stylebox.pack_start(style3, False, True, 0)
    Labelbox3 = Gtk.VBox()
    EgLabel3 = Gtk.Label()
    EgLabel3.set_markup("AaBbCcDdEe...")
    Labelbox3.pack_start(EgLabel3, True, True, 10)
    NameLabel3 = Gtk.Label("Normal Style")
    Labelbox3.pack_start(NameLabel3, True, True, 10)
    style3.add(Labelbox3)
    morestyles = Gtk.Button()
    morestyles.set_property("height-request", 30)
    morestyles.set_property("label", "More Styles")
    Stylebox.pack_start(morestyles, False, True, 0)
    toolbox.pack_start(Stylebox, False, True, 4)
    Stylebox.get_style_context().add_class("linked")
  
    toolseparator2 = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
    toolbox.pack_start(toolseparator2, False, False, 20)
  
    FRBox = Gtk.VBox()
    findentry = Gtk.Entry()
    findentry.set_placeholder_text("Find...")
    replaceentry = Gtk.Entry()
    replaceentry.set_placeholder_text("Replace...")
    replacebutton = Gtk.Button(label="replace")
    replacebutton.set_property("height-request", 30)
    FRBox.pack_start(findentry, False, True, 0)
    FRBox.pack_start(replaceentry, False, True, 0)
    FRBox.pack_start(replacebutton, False, True, 0)
    FRBox.get_style_context().add_class("linked")
    toolbox.pack_start(FRBox, False, True, 4)
  
    toolspacer = Gtk.HBox()
    toolspacer.pack_start(toolbox, True, True, 10)
    toolsectionbox = Gtk.VBox()
    toolsectionbox.pack_start(SectionTitleBox, True, True, 0)
    toolseparator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
    toolsectionbox.pack_start(toolseparator, False, False, 0)
    toolsectionbox.pack_start(toolspacer, True, True, 10)
    scroll = Gtk.ScrolledWindow()
    scroll.add_with_viewport(toolsectionbox)
    ToolStack.add_titled(scroll, "home_toolbox", "Home")

  def create_insert_toolbox(self, ToolStack):
    toolbox = Gtk.VBox()
    
    SectionTitle = Gtk.Label("Insert")
    SectionTitle.set_name("SectionTitle")
    SectionTitleBox = Gtk.VBox()
    SectionTitleBox.pack_start(SectionTitle, False, True, 0)
    
    pagebts = Gtk.VBox()
    pbreak = Gtk.Button()
    pbreak.set_property("width-request", 50)
    pbreak.set_property("height-request", 30)
    pbreak.set_property("label", "Page Break")
    pnew = Gtk.Button()
    pnew.set_property("width-request", 50)
    pnew.set_property("height-request", 30)
    pnew.set_property("label", "New Page")
    pagebts.pack_start(pbreak, False, False, 0)
    pagebts.pack_start(pnew, False, False, 0)
    toolbox.pack_start(pagebts, False, False, 4)
    pagebts.get_style_context().add_class("linked")
  
    toolseparator1 = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
    toolbox.pack_start(toolseparator1, False, False, 20)
  
    Shapes = Gtk.VBox()
  
    Shapes1 = Gtk.HBox()
    Square = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/square.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Square.add(EgImage)
    Shapes1.pack_start(Square, True, True, 0)
    Circle = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/circle.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Circle.add(EgImage)
    Shapes1.pack_start(Circle, True, True, 0)
    Line = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/line.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Line.add(EgImage)
    Shapes1.pack_start(Line, True, True, 0)
    Curve = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/curve.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Curve.add(EgImage)
    Shapes1.pack_start(Curve, True, True, 0)
    Shapes1.get_style_context().add_class("linked")
    Shapes.pack_start(Shapes1, False, True, 2)
  
    Shapes2 = Gtk.HBox()
    Heart = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/heart.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Heart.add(EgImage)
    Shapes2.pack_start(Heart, True, True, 0)
    Cross = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/cross.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Cross.add(EgImage)
    Shapes2.pack_start(Cross, True, True, 0)
    Hexagon = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/hexagon.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Hexagon.add(EgImage)
    Shapes2.pack_start(Hexagon, True, True, 0)
    Pentagon = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/pentagon.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Pentagon.add(EgImage)
    Shapes2.pack_start(Pentagon, True, True, 0)
    Shapes2.get_style_context().add_class("linked")
    Shapes.pack_start(Shapes2, False, True, 2)
  
    Shapes3 = Gtk.HBox()
    Triangle = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/triangle.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Triangle.add(EgImage)
    Shapes3.pack_start(Triangle, True, True, 0)
    Trapezoid = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/trapezoid.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Trapezoid.add(EgImage)
    Shapes3.pack_start(Trapezoid, True, True, 0)
    Parallelogram = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/parallelogram.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Parallelogram.add(EgImage)
    Shapes3.pack_start(Parallelogram, True, True, 0)
    Frame = Gtk.Button()
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("Shapes/frame.svg", width=20, height=20, preserve_aspect_ratio=True)
    EgImage = Gtk.Image.new_from_pixbuf(pixbuf)
    Frame.add(EgImage)
    Shapes3.pack_start(Frame, True, True, 0)
    Shapes3.get_style_context().add_class("linked")
    Shapes.pack_start(Shapes3, False, True, 2)
  
    toolbox.pack_start(Shapes, False, True, 4)
  
    toolseparator2 = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
    toolbox.pack_start(toolseparator2, False, False, 20)
  
    Tables = Gtk.VBox()
    TCollumns = Gtk.Entry()
    TCollumns.set_placeholder_text("Number of collumns")
    Tables.pack_start(TCollumns, False, False, 0)
    TRows = Gtk.Entry()
    TRows.set_placeholder_text("Number of rows")
    Tables.pack_start(TRows, False, False, 0)
    CreateTable = Gtk.Button("Create Table")
    CreateTable.set_property("height-request", 30)
    Tables.pack_start(CreateTable, False, False, 0)
    Tables.get_style_context().add_class("linked")
    toolbox.pack_start(Tables, False, True, 4)
  
    toolseparator2 = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
    toolbox.pack_start(toolseparator2, False, False, 20)
  
    BeautyGrambox = Gtk.VBox()
    BG1 = Gtk.Button()
    BG1.set_property("height-request", 100)
    BeautyGrambox.pack_start(BG1, False, True, 0)
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("BeautyGram/BeautyGram1.png", width=150, height=100, preserve_aspect_ratio=True)
    EgImage1 = Gtk.Image.new_from_pixbuf(pixbuf)
    BG1.add(EgImage1)
    BG2 = Gtk.Button()
    BG2.set_property("height-request", 100)
    BeautyGrambox.pack_start(BG2, False, True, 0)
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("BeautyGram/BeautyGram2.png", width=150, height=100, preserve_aspect_ratio=True)
    EgImage2 = Gtk.Image.new_from_pixbuf(pixbuf)
    BG2.add(EgImage2)
    BG3 = Gtk.Button()
    BG3.set_property("height-request", 100)
    BeautyGrambox.pack_start(BG3, False, True, 0)
    pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale("BeautyGram/BeautyGram3.png", width=150, height=100, preserve_aspect_ratio=True)
    EgImage3 = Gtk.Image.new_from_pixbuf(pixbuf)
    BG3.add(EgImage3)
    moreBGs = Gtk.Button()
    moreBGs.set_property("height-request", 30)
    moreBGs.set_property("label", "More BeautyGrams")
    BeautyGrambox.pack_start(moreBGs, False, True, 0)
    toolbox.pack_start(BeautyGrambox, False, True, 4)
    BeautyGrambox.get_style_context().add_class("linked")
  
    toolseparator3 = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
    toolbox.pack_start(toolseparator3, False, False, 20)
  
    Chartbox = Gtk.VBox()
    Ch1 = Gtk.Button()
    Ch1.set_property("height-request", 100)
    Chartbox.pack_start(Ch1, False, True, 0)
    EgLabel1 = Gtk.Label()                                                              #Switch Labels with Chart images
    EgLabel1.set_markup("<b><big><big><big>Chart1</big></big></big></b>")
    Ch1.add(EgLabel1)
    Ch2 = Gtk.Button()
    Ch2.set_property("height-request", 100)
    Chartbox.pack_start(Ch2, False, True, 0)
    EgLabel2 = Gtk.Label()                                                              #Switch Labels with Chart images
    EgLabel2.set_markup("<b><big><big><big>Chart2</big></big></big></b>")
    Ch2.add(EgLabel2)
    Ch3 = Gtk.Button()
    Ch3.set_property("height-request", 100)
    Chartbox.pack_start(Ch3, False, True, 0)
    EgLabel3 = Gtk.Label()                                                              #Switch Labels with Chart images
    EgLabel3.set_markup("<b><big><big><big>Chart3</big></big></big></b>")
    Ch3.add(EgLabel3)
    moreChs = Gtk.Button()
    moreChs.set_property("height-request", 30)
    moreChs.set_property("label", "More Charts")
    Chartbox.pack_start(moreChs, False, True, 0)
    toolbox.pack_start(Chartbox, False, True, 4)
    Chartbox.get_style_context().add_class("linked")
  
    toolseparator5 = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
    toolbox.pack_start(toolseparator5, False, False, 20)
  
    symbol = Gtk.Button()
    symbol.set_property("width-request", 50)
    symbol.set_property("height-request", 30)
    symbol.set_property("label", "Symbol")
    toolbox.pack_start(symbol, False, True, 4)
  
    textelementbts = Gtk.HBox()
    DropCap = Gtk.Button()
    DropCapicon = Gtk.Image.new_from_icon_name("media-view-subtitles-symbolic", Gtk.IconSize.BUTTON)
    DropCap.add(DropCapicon)
    textelementbts.pack_start(DropCap, True, True, 0)
    image = Gtk.Button()
    imageicon = Gtk.Image.new_from_icon_name("font-select-symbolic", Gtk.IconSize.BUTTON)
    image.add(imageicon)
    textelementbts.pack_start(image, True, True, 0)
    toolbox.pack_start(textelementbts, False, True, 4)
    textelementbts.get_style_context().add_class("linked")
    
    toolspacer = Gtk.HBox()
    toolspacer.pack_start(toolbox, True, True, 10)
    toolsectionbox = Gtk.VBox()
    toolsectionbox.pack_start(SectionTitleBox, True, True, 0)
    toolseparator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
    toolsectionbox.pack_start(toolseparator, True, True, 0)
    toolsectionbox.pack_start(toolspacer, True, True, 10)
    scroll = Gtk.ScrolledWindow()
    scroll.add_with_viewport(toolsectionbox)
    ToolStack.add_titled(scroll, "insert_toolbox", "Insert")
  
  def create_pageview(self, paned):
    PageScroll = Gtk.ScrolledWindow()
    PageViewWrapper = Gtk.Grid()
    PageView = Gtk.Grid()
    PageView.set_name("PageView")
    PageView.get_style_context().add_class(Granite.STYLE_CLASS_CARD)
    PageView.set_margin_top(12)
    PageView.set_margin_bottom(12)
    PageView.set_margin_left(12)
    PageView.set_margin_right(12),
    PageView.set_property("height-request", 1123)
    PageView.set_property("width-request", 794)
    PageView.set_hexpand(False)
    PageView.set_vexpand(False)
    PageViewWrapper.set_property("valign", Gtk.Align.CENTER)
    PageViewWrapper.set_property("halign", Gtk.Align.CENTER)
    PageViewWrapper.add(PageView)
    PageScroll.add_with_viewport(PageViewWrapper)
    paned.add2(PageScroll)
  
    self.TextView = Gtk.TextView()
    self.TextBuffer = self.TextView.get_buffer()
    PageView.add(self.TextView)
    self.TextView.set_hexpand(True)
    self.TextView.set_vexpand(True)
    self.TextView.set_margin_top(100)
    self.TextView.set_margin_bottom(100)
    self.TextView.set_margin_left(50)
    self.TextView.set_margin_right(50)
    self.TextView.set_wrap_mode(Gtk.WrapMode.WORD)
    PageView.set_margin_right(50)

    self.tag_bold = self.TextBuffer.create_tag("bold", weight=Pango.Weight.BOLD)
    self.tag_thin = self.TextBuffer.create_tag("thin", weight=Pango.Weight.NORMAL)
    self.tag_italics = self.TextBuffer.create_tag("italic", style=Pango.Style.ITALIC)
    self.tag_straight = self.TextBuffer.create_tag("straight", style=Pango.Style.NORMAL)
    self.tag_underline = self.TextBuffer.create_tag("underline", underline=Pango.Underline.SINGLE)
    self.tag_no_underline = self.TextBuffer.create_tag("no underline", underline=Pango.Underline.NONE)
    self.tag_strikethrough = self.TextBuffer.create_tag("strikethrough", strikethrough=True)
    self.tag_no_strikethrough = self.TextBuffer.create_tag("no_strikethrough", strikethrough=False)

    self.TextBuffer.connect("mark-set", self.get_bounds)

  def edit_tags(self, widget, tag, untag):
    active = widget.get_active()
    if self.bounds != None:
        print(active)
        start, end = self.bounds
        if active is True:
          self.TextBuffer.remove_tag(untag, start, end)
          self.TextBuffer.apply_tag(tag, start, end)
        else:
          self.TextBuffer.remove_tag(tag, start, end)
          self.TextBuffer.apply_tag(untag, start, end)
    else:
        widget.set_active(False)
    active = None
  
  def get_bounds(self, widget, var1, var2):
    bds = self.TextBuffer.get_selection_bounds()
    if len(bds) != 0:
      self.bounds = bds
    else:
      self.position = self.TextBuffer.get_insert()
      self.mark_iter = self.TextBuffer.get_iter_at_mark(self.position)
      self.Tags = self.mark_iter.get_toggled_tags(False)

  def change_size(self, widget):
    self.TextView.grab_focus()
    if self.bounds != None:
      start, end = self.bounds
      sizetag = self.TextBuffer.create_tag(size=widget.get_value_as_int()*1024)
#      self.TextBuffer.remove_tag(sizetag, start, end)
      self.TextBuffer.apply_tag(sizetag, start, end)
      

window = main_window()
#window.maximize()
window.set_position(Gtk.WindowPosition.CENTER)
window.set_default_size(1366, 768)
window.connect("delete-event", Gtk.main_quit)
#window.maximize()
window.show_all()
Gtk.main()
